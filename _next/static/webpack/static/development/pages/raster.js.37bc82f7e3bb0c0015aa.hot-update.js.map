{"version":3,"file":"static/webpack/static/development/pages/raster.js.37bc82f7e3bb0c0015aa.hot-update.js","sources":["webpack:///./components/WorkTiles.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport Link from 'next/link';\r\nimport classNames from 'classnames';\r\nimport _ from 'lodash';\r\nimport { jsx, css } from '@emotion/core';\r\n\r\nimport WorkTile from './WorkTile';\r\n\r\ninterface IWork {\r\n  path : string;\r\n  size : number[];\r\n};\r\n\r\nexport interface IWorkTile {\r\n  path : string;\r\n  size : number[];\r\n  aspectRatio : number;\r\n  idx : number;\r\n  width : { [device : string] : number };\r\n};\r\n\r\ninterface Props {\r\n  rootPath : string;\r\n  works : IWork[];\r\n  aspectRatioPerRow? : number;\r\n};\r\n\r\nexport const ContainerWidths : { [device : string] : number } = {\r\n  'desktop': 1200,\r\n  'laptop': 1000,\r\n  'tablet': 900,\r\n};\r\nexport const ImageGap = 20;\r\n\r\nconst WorkTiles = ({ rootPath, works, aspectRatioPerRow = 3.0 } : Props) => {\r\n  const workTiles : IWorkTile[] = useMemo(\r\n    () => works.map(w => ({\r\n      ...w,\r\n      aspectRatio: w.size[0] / w.size[1],\r\n      idx: -1,\r\n      width: {},\r\n      path: rootPath + w.path,\r\n    })),\r\n    [rootPath, works]\r\n  );\r\n\r\n  const tiledWorks : any[] = [];\r\n  let currentRow : any[] = [];\r\n  \r\n  workTiles.forEach((work, i) => {\r\n    let currentRowAspectRatioSum = currentRow.reduce((a, b) => a + b.aspectRatio, 0);\r\n    if(i === workTiles.length - 1)\r\n      currentRow.push(work);\r\n    if(currentRowAspectRatioSum + work.aspectRatio > aspectRatioPerRow || i === workTiles.length - 1) {\r\n      console.log('width', Object.keys(ContainerWidths)\r\n      .map(device => [ device, w.aspectRatio / currentRowAspectRatioSum * ContainerWidths[device] / (ContainerWidths[device] + (currentRow.length - 1) * (ImageGap + 1)) ])\r\n      .reduce((obj : any, x) => obj[x[0]] = x[1], {}))\r\n      // The row is complete\r\n      currentRowAspectRatioSum = currentRow.reduce((a, b) => a + b.aspectRatio, 0)\r\n      tiledWorks.push(...currentRow.map((w, j) => ({\r\n        ...w,\r\n        idx: j,\r\n        width: Object.keys(ContainerWidths)\r\n          .map(device => [ device, w.aspectRatio / currentRowAspectRatioSum * ContainerWidths[device] / (ContainerWidths[device] + (currentRow.length - 1) * (ImageGap + 1)) ])\r\n          .reduce((obj : any, x) => obj[x[0]] = x[1], {}),\r\n      })));\r\n      currentRow = [];\r\n    }\r\n    if(i < workTiles.length - 1) {\r\n      currentRow.push(work);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container works-container\">\r\n        {tiledWorks.map((work, i) =>\r\n          <WorkTile\r\n            key={i}\r\n            {...work}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WorkTiles; \r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAMA;;AAKA;AAQA;AAMA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAUA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AALA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AASA;AACA;AACA;;;;A","sourceRoot":""}