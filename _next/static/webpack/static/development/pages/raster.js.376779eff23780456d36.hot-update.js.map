{"version":3,"file":"static/webpack/static/development/pages/raster.js.376779eff23780456d36.hot-update.js","sources":["webpack:///./components/WorkTile.tsx"],"sourcesContent":["import React, { useRef, useMemo, useState, useCallback } from 'react';\r\nimport Link from 'next/link';\r\nimport classNames from 'classnames';\r\nimport _ from 'lodash';\r\nimport { jsx, css } from '@emotion/core';\r\n\r\nimport { IWorkTile, ImageGap } from './WorkTiles';\r\n\r\ninterface Props extends IWorkTile {\r\n  //\r\n};\r\n\r\nconst WorkTile = ({ path, size, aspectRatio, idx, width } : Props) => {\r\n  const baseImgRef = useRef<HTMLDivElement>(null);\r\n  const [ active, setActive ] = useState(false);\r\n  const [ zoomed, setZoomed ] = useState(false);\r\n  \r\n  const ESCAPE_KEY = 27;\r\n  const zoomDuration = 250;\r\n  function zoomOutOnEscape(evt : KeyboardEvent) {\r\n    if(evt.keyCode === ESCAPE_KEY)\r\n      zoomOut();\r\n  };\r\n  const zoomIn = () => {\r\n    // if(active)\r\n    //   return;\r\n    setActive(true);\r\n    setTimeout(() => setZoomed(true), 10);\r\n    document.addEventListener(\"keydown\", zoomOutOnEscape);\r\n  };\r\n  \r\n  const zoomOut = () => {\r\n    // if(!active)\r\n    //   return;\r\n    setZoomed(false);\r\n    setTimeout(() => setActive(false), zoomDuration);\r\n    document.removeEventListener(\"keydown\", zoomOutOnEscape);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        ref={baseImgRef}\r\n        className=\"work\"\r\n        css={css`\r\n          // width: calc(${width * 100}% - ${idx === 0 ? 0 : 20}px);\r\n          width: ${width * 100}%;\r\n          padding-top: ${1.0 / aspectRatio * 100 * width}%;\r\n          background-image: url(${path});\r\n          margin-left: ${idx === 0 ? 0 : ImageGap}px;\r\n          visibility: ${active ? 'hidden' : 'visible'};\r\n\r\n          @media (max-width: 768px) {\r\n            width: 100%;\r\n            padding-top: ${1.0 / aspectRatio * 100}%;\r\n            margin-left: 0;\r\n          }\r\n        `}\r\n        onClick={evt => zoomIn()}\r\n      />\r\n      {active &&\r\n      <>\r\n        <div\r\n          className={classNames(\"zoomed-work-background\")}\r\n          onClick={evt => zoomOut()}\r\n          css={css`\r\n            transition: all ${zoomDuration / 1000}s ease-in-out;\r\n            opacity: ${zoomed ? 0.2 : 0.0};\r\n          `}\r\n        />\r\n        <div\r\n          className={classNames(\"zoomed-work\", { zoomed })}\r\n          onClick={evt => zoomOut()}\r\n          css={active ? css`\r\n            transition: all ${zoomDuration / 1000}s ease-in-out;\r\n            left: ${zoomed ? '50%' : `${((baseImgRef.current?.getBoundingClientRect().left || 0) + (baseImgRef.current?.getBoundingClientRect().width || 0) / 2)}px`};\r\n            top: ${zoomed ? '50%' : `${((baseImgRef.current?.getBoundingClientRect().top || 0) + (baseImgRef.current?.getBoundingClientRect().height || 0) / 2)}px`};\r\n            transform: translate(-50%, -50%);\r\n            width: ${zoomed ? '80vw' : `${(baseImgRef.current?.getBoundingClientRect().width || 0)}px`};\r\n            height: ${zoomed ? '80vh' : `${(baseImgRef.current?.getBoundingClientRect().height || 0)}px`};\r\n            background-image: url(${path});\r\n          ` : css``}\r\n        />\r\n      </>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WorkTile; \r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAEA;;AAIA;AACA;;;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAcA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;;;;A","sourceRoot":""}