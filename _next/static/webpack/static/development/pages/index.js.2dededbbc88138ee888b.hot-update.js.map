{"version":3,"file":"static/webpack/static/development/pages/index.js.2dededbbc88138ee888b.hot-update.js","sources":["webpack:///./components/react-accelerometer.js"],"sourcesContent":["const React = require('react')\n\n/**\n * @usage\n *    <ReactAccelerometer useGravity multiplier={3}>\n *      {(position, rotation) => (\n *        <div style={{ transform: `translate3d(${position.x}px, ${position.y}px, 0)`}}>\n *          Hello there\n *        </div>\n *      )}\n *    </ReactAccelerometer>\n */\nclass ReactAccelerometer extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      x: null,\n      y: null,\n      z: null,\n      rotation: null,\n      landscape: false\n    }\n\n    this.handleAcceleration = this.handleAcceleration.bind(this)\n    this.handleOrientation = this.handleOrientation.bind(this)\n  }\n\n  componentDidMount () {\n    this.handleOrientation()\n    console.log(\"window.DeviceMotionEvent\", window.DeviceMotionEvent)\n    console.log(\"window.addEventListener('devicemotion', this.handleAcceleration)\")\n    window.addEventListener('devicemotion', this.handleAcceleration)\n    window.addEventListener('orientationchange', this.handleOrientation)\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('devicemotion', this.handleAcceleration)\n    window.removeEventListener('orientationchange', this.handleOrientation)\n  }\n\n  handleOrientation (event) {\n    console.log('handleOrientation', event)\n    const { orientation } = window\n    this.setState({ landscape: orientation === 90 || orientation === -90 })\n  }\n\n  handleAcceleration (event) {\n    console.log('handleAcceleration', event)\n    const { landscape } = this.state\n    const { useGravity, multiplier } = this.props\n    const acceleration = useGravity ? event.accelerationIncludingGravity : event.acceleration\n    const rotation = event.rotationRate || null\n    const { x, y, z } = acceleration\n\n    this.setState({\n      rotation,\n      x: (landscape ? y : x) * multiplier,\n      y: (landscape ? x : y) * multiplier,\n      z: z * multiplier\n    })\n  }\n\n  render () {\n    const { children } = this.props\n    const { x, y, z, rotation } = this.state\n\n    /**\n     * We have to detect if one of the values was ever set by the 'devicemotion' event,\n     * as some browsers implement the API, but the device itself doesn't support.\n     */\n    if (x || y || z) {\n      return children({ x, y, z }, rotation)\n    }\n\n    return children()\n  }\n}\n\n// ReactAccelerometer.propTypes = {\n//   children: React.PropTypes.func.isRequired,\n//   multiplier: React.PropTypes.number,\n//   useGravity: React.PropTypes.bool\n// }\n\nReactAccelerometer.defaultProps = {\n  multiplier: 1,\n  useGravity: true\n}\n\nmodule.exports = ReactAccelerometer\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;;;;;;;;;AAUA;;;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAZA;AAaA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;;;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AACA;AALA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;AAhEA;AAoEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}